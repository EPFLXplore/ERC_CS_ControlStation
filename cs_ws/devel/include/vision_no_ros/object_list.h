// Generated by gencpp from file vision_no_ros/object_list.msg
// DO NOT EDIT!


#ifndef VISION_NO_ROS_MESSAGE_OBJECT_LIST_H
#define VISION_NO_ROS_MESSAGE_OBJECT_LIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <vision_no_ros/panel_object.h>

namespace vision_no_ros
{
template <class ContainerAllocator>
struct object_list_
{
  typedef object_list_<ContainerAllocator> Type;

  object_list_()
    : detected_objects()  {
    }
  object_list_(const ContainerAllocator& _alloc)
    : detected_objects(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::vision_no_ros::panel_object_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::vision_no_ros::panel_object_<ContainerAllocator> >::other >  _detected_objects_type;
  _detected_objects_type detected_objects;





  typedef boost::shared_ptr< ::vision_no_ros::object_list_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_no_ros::object_list_<ContainerAllocator> const> ConstPtr;

}; // struct object_list_

typedef ::vision_no_ros::object_list_<std::allocator<void> > object_list;

typedef boost::shared_ptr< ::vision_no_ros::object_list > object_listPtr;
typedef boost::shared_ptr< ::vision_no_ros::object_list const> object_listConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_no_ros::object_list_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_no_ros::object_list_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision_no_ros::object_list_<ContainerAllocator1> & lhs, const ::vision_no_ros::object_list_<ContainerAllocator2> & rhs)
{
  return lhs.detected_objects == rhs.detected_objects;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision_no_ros::object_list_<ContainerAllocator1> & lhs, const ::vision_no_ros::object_list_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision_no_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vision_no_ros::object_list_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_no_ros::object_list_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_no_ros::object_list_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_no_ros::object_list_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_no_ros::object_list_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_no_ros::object_list_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_no_ros::object_list_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93cc90f8ec35aa397138799e59c6bb47";
  }

  static const char* value(const ::vision_no_ros::object_list_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93cc90f8ec35aa39ULL;
  static const uint64_t static_value2 = 0x7138799e59c6bb47ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_no_ros::object_list_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_no_ros/object_list";
  }

  static const char* value(const ::vision_no_ros::object_list_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_no_ros::object_list_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panel_object[] detected_objects\n"
"================================================================================\n"
"MSG: vision_no_ros/panel_object\n"
"int8 id\n"
"int8 reliability\n"
"float32 x_pos\n"
"float32 y_pos\n"
"float32 z_pos\n"
"float32 x_rot\n"
"float32 y_rot\n"
"float32 z_rot\n"
"float32 w_quaternion\n"
"float32 x_quaternion\n"
"float32 y_quaternion\n"
"float32 z_quaternion\n"
;
  }

  static const char* value(const ::vision_no_ros::object_list_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_no_ros::object_list_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detected_objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct object_list_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_no_ros::object_list_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_no_ros::object_list_<ContainerAllocator>& v)
  {
    s << indent << "detected_objects[]" << std::endl;
    for (size_t i = 0; i < v.detected_objects.size(); ++i)
    {
      s << indent << "  detected_objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vision_no_ros::panel_object_<ContainerAllocator> >::stream(s, indent + "    ", v.detected_objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_NO_ROS_MESSAGE_OBJECT_LIST_H
