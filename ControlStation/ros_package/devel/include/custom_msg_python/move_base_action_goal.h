// Generated by gencpp from file custom_msg_python/move_base_action_goal.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_PYTHON_MESSAGE_MOVE_BASE_ACTION_GOAL_H
#define CUSTOM_MSG_PYTHON_MESSAGE_MOVE_BASE_ACTION_GOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Int8.h>
#include <geometry_msgs/Pose.h>

namespace custom_msg_python
{
template <class ContainerAllocator>
struct move_base_action_goal_
{
  typedef move_base_action_goal_<ContainerAllocator> Type;

  move_base_action_goal_()
    : currId()
    , moveBaseGoal()  {
    }
  move_base_action_goal_(const ContainerAllocator& _alloc)
    : currId(_alloc)
    , moveBaseGoal(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Int8_<ContainerAllocator>  _currId_type;
  _currId_type currId;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _moveBaseGoal_type;
  _moveBaseGoal_type moveBaseGoal;





  typedef boost::shared_ptr< ::custom_msg_python::move_base_action_goal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg_python::move_base_action_goal_<ContainerAllocator> const> ConstPtr;

}; // struct move_base_action_goal_

typedef ::custom_msg_python::move_base_action_goal_<std::allocator<void> > move_base_action_goal;

typedef boost::shared_ptr< ::custom_msg_python::move_base_action_goal > move_base_action_goalPtr;
typedef boost::shared_ptr< ::custom_msg_python::move_base_action_goal const> move_base_action_goalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg_python::move_base_action_goal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg_python::move_base_action_goal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg_python::move_base_action_goal_<ContainerAllocator1> & lhs, const ::custom_msg_python::move_base_action_goal_<ContainerAllocator2> & rhs)
{
  return lhs.currId == rhs.currId &&
    lhs.moveBaseGoal == rhs.moveBaseGoal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg_python::move_base_action_goal_<ContainerAllocator1> & lhs, const ::custom_msg_python::move_base_action_goal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg_python

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msg_python::move_base_action_goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg_python::move_base_action_goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_python::move_base_action_goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_python::move_base_action_goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_python::move_base_action_goal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_python::move_base_action_goal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg_python::move_base_action_goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "512860f1cd6d90bb8cf7bd87927bb3d7";
  }

  static const char* value(const ::custom_msg_python::move_base_action_goal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x512860f1cd6d90bbULL;
  static const uint64_t static_value2 = 0x8cf7bd87927bb3d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg_python::move_base_action_goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg_python/move_base_action_goal";
  }

  static const char* value(const ::custom_msg_python::move_base_action_goal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg_python::move_base_action_goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"std_msgs/Int8 currId\n"
"geometry_msgs/Pose moveBaseGoal\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int8\n"
"int8 data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::custom_msg_python::move_base_action_goal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg_python::move_base_action_goal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.currId);
      stream.next(m.moveBaseGoal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct move_base_action_goal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg_python::move_base_action_goal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg_python::move_base_action_goal_<ContainerAllocator>& v)
  {
    s << indent << "currId: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.currId);
    s << indent << "moveBaseGoal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.moveBaseGoal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_PYTHON_MESSAGE_MOVE_BASE_ACTION_GOAL_H
